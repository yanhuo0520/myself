<template>
  <div class="eachothers">
    <van-nav-bar title="组织团体互评" left-arrow fixed @click-left="leftBack" />
    <div class="top_title">
      <p>您正在评价<span>“团体成员”</span>请认真选择以下信息</p>
      <img src="../../images/credit/top_title.png" alt="" class="title_img">
    </div>
    <van-field v-model="groupStr" label="您所在组织" :placeholder="groupStr" input-align="right" readonly is-link>
      <template #left-icon>
        <img src="../../images/credit/zuzhi.png" alt="" width="20">
      </template>
    </van-field>
    <van-field v-model="groupStr" label="被评人所在组织" :placeholder="groupStr" input-align="right" readonly is-link>
      <template #left-icon>
        <img src="../../images/credit/zuzhi1.png" alt="" width="20">
      </template>
    </van-field>
    <props :propContent="bypeopleList" :xjdi.sync="bypeople" :indexs.sync="bypeopleindex" :label="bypeoplelabel" type="short"
      :iconUrl="icon">
    </props>
    <van-field v-model="relation" label="与被评人的关系" placeholder="请输入" input-align="right">
      <template #left-icon>
        <img src="../../images/credit/guanxi.png" alt="" width="20">
      </template>
    </van-field>
    <van-cell center>
      <template #title>
        <img src="../../images/credit/niming.png" alt="" width="20">
        <span class="custom-title">是否匿名评价</span>
      </template>
      <template #right-icon>
        <van-switch v-model="checked" size="24" />
      </template>
    </van-cell>
   
      <van-button class="dafen" type="info" @click="addCredit">开始评分
        <template #icon>
            <img src="../../images/credit/pfStart.png" alt="" width="15">
        </template>
      </van-button>
 

  </div>
</template>

<script>
  import props from "@/pages/credit/props";
  export default {
    name: "eachothers",
    components: {
      props
    },

    data() {
      return {
        checked: true,
        bygradelabel: '被评人所在的组织',
        bygrade: '',
        bygradeindex: 0,
        bypeopleList: [],
        bypeoplelabel: '被评人姓名',
        bypeople: '',
        bypeopleindex: 0,
        relationlabel: '您和被评人的关系',
        relation: '',
        relationindex: 0,
        isGroup: 0,
        groupStr: '',
        teamList: [],
        is_n: 0,
        userID: '',
        teamId: '',
        icon: 'bpren',
        isRefresh: 1,
        lastPath: '',
      };
    },
    mounted() {
      this.getTeamLists()
    },
    created() {
      let is_group = this.$route.query.is_group
       let lastPath = this.$route.query.lastPath; 
       if(lastPath){
         this.lastPath = lastPath;
       }
      if (is_group == 1) {
        this.isGroup = 1;
        this.groupStr = '合作社成员';
      } else if (is_group == 2) {
        this.isGroup = 2;
        this.groupStr = '团队成员';
      }
    },
    watch: {
      bypeople: {
        handler: function () {
          console.log(this.bypeople);
          this.teamList.forEach(item => {
            if (item.name == this.bypeople) {
              this.userID = item.user_id;
              this.teamId = item.id;
            }
          })
        },
      },
    },
    methods: {
      leftBack() {
         this.$router.push({
            path:this.lastPath,
            query:{
                isRefresh: this.isRefresh
            }
        })

      },
      addCredit() {
        let that = this;
        if (that.bypeople == "") {
          that.$toast('请选择被评人');
          return
        } else if (that.relation == "") {
          that.$toast('请输入您和被评人的关系');
          return
        }
        if (that.checked) {
          that.is_n = 2;
        } else {
          that.is_n = 1;
        }
        that.$api.addCredit({
          type: that.isGroup,
          is_n: that.is_n,
          b_user_id: that.userID,
          relation: that.relation,
          id: that.teamId
        }).then(res => {
          if (res.errno == 0) {
            localStorage.setItem('id', res.data)
               that.$router.push({
                    path:'/eachFlows',
                    query: {
                      lastPath: "/eachOthers",
                    }
                  });
          
          } else {
            that.$toast(res.errmsg)
          }
        }).catch(err => {

        })
      },
      getTeamLists() {
        let that = this;
        that.$api.teamLists({
          type: that.isGroup
        }).then(res => {
          if (res.errno == 0) {
            that.teamList = res.data;
            res.data.forEach(item => {
              var items = {};
              items.title = item.name;
              that.bypeopleList.push(items)
            });
          } else {
            that.$toast(res.errmsg)
          }

        }).catch(err => {

        })
      }
    },
  }
</script>

<style lang="less">
  .eachothers {
    padding-top: 46px;

    .van-nav-bar {
      background: #F0F6FC;

      .van-icon {
        color: #222222;

      }

      .van-nav-bar__title {
        font-size: 16px;
        font-weight: bold;
      }

    }

    .top_title {
      display: flex;
      height: 37px;
      font-size: 13px;
      background: #F0F6FC;

      >p {
        flex: 1;
        padding: 0 0 0 15px;
        margin-top: 10px;
        >span {
          color: #3B6AF1;
        }
      }

      .title_img {
        float: right;
        height: 100%;
        margin-right: 15px;
      }
    }

    .van-cell::after {
      border: 0;
    }

    .van-field__control--right {
      color: #9AA8B6;
    }
    .dafen {
      position: absolute;
      bottom: 0;
      width: 100%;
    }
  }
</style>