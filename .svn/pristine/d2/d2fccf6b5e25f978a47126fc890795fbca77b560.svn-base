import axios from 'axios';
import qs from 'QS'



axios.defaults.timeout = 50000;
// axios.defaults.withCredentials = true;
// axios.defaults.crossDomain = true;
axios.defaults.baseURL = 'http://raise.hnahi.org.cn/raise';
// axios.defaults.baseURL ='http://172.168.0.40:8080/raise';//闫魁
// axios.defaults.baseURL ='http://172.168.0.39:8080/raise';//耿强


// let getCookie = function (cookie) {
//   let reg = /csrftoken=([\w]+)[;]?/g
//   return reg.exec(cookie)[1]

// }
//http request 拦截器
axios.interceptors.request.use(
  config => {
    // const token = getCookie('Cookie');注意使用的时候需要引入cookie方法，推荐js-cookie
    // const token = localStorage.getItem('token')
    // let cookie;
    // if(localStorage.getItem('cookieKey') != null){
    //   cookie = localStorage.getItem('cookieKey')
    // }
    // config.data = qs.stringify(config.data);
    // config.headers = {
    //   'Content-Type':'application/x-www-form-urlencoded',
    //   'livestock': 'user',
    //   'Cookie': cookie
    // }
    // let cookie = document.cookie;
    // if(cookie && config.method == 'post'){
    //   config.headers['X-CSRFToken'] = getCookie(cookie);
    // }
    let token = localStorage.getItem('token');
    config.data = qs.stringify(config.data);
    config.headers = {
      'Content-Type': 'application/x-www-form-urlencoded',
      'livestock': 'user',
      'authToken': token
    }
    // if(token){
    //   config.params = {'token':token}
    // }
    return config;
  },
  error => {
    return Promise.reject(err);
  }
);


//响应拦截器即异常处理
axios.interceptors.response.use(response => {
  return response
}, err => {
  if (err && err.response) {
    switch (err.response.status) {
      case 400: console.log('错误请求')
        break; case 401: console.log('未授权，请重新登录')
        break; case 403: console.log('拒绝访问')
        break; case 404: console.log('请求错误,未找到该资源')
        break; case 405: console.log('请求方法未允许')
        break; case 408: console.log('请求超时')
        break; case 500: console.log('服务器端出错')
        break; case 501: console.log('网络未实现')
        break; case 502: console.log('网络错误')
        break; case 503: console.log('服务不可用')
        break; case 504: console.log('网络超时')
        break; case 505: console.log('http版本不支持该请求')
        break; default: console.log(`连接错误${err.response.status}`)
    }
  } else {
    console.log('连接到服务器失败')
    // alert('连接到服务器失败')
  }
  return Promise.resolve(err.response)
})

//http response 拦截器
// axios.interceptors.response.use(
//   response => {
//     if(response.code ==2){
//       router.push({
//         path:"/login",
//         query:{redirect:router.currentRoute.fullPath}//从哪个页面跳转
//       })
//     }
//     return response;
//   },
//   error => {
//     return Promise.reject(error)
//   }
// )


/**
 * 封装get方法
 * @param url
 * @param data
 * @returns {Promise}
 */

export function fetch(url, params = {}) {
  return new Promise((resolve, reject) => {
    axios.get(url, {
      params: params
    })
      .then(res => {
        resolve(res.data);
      })
      .catch(err => {
        reject(err)
      })
  })
}


/**
 * 封装post请求
 * @param url
 * @param data
 * @returns {Promise}
 */

export function post(url, data = {}) {
  return new Promise((resolve, reject) => {
    axios.post(url, data)
      .then(res => {
        resolve(res);
      }, err => {
        reject(err)
      })
  })
}

/**
* 封装patch请求
* @param url
* @param data
* @returns {Promise}
*/

export function patch(url, data = {}) {
  return new Promise((resolve, reject) => {
    axios.patch(url, data)
      .then(response => {
        resolve(response.data);
      }, err => {
        reject(err)
      })
  })
}

/**
* 封装put请求
* @param url
* @param data
* @returns {Promise}
*/

export function put(url, data = {}) {
  return new Promise((resolve, reject) => {
    axios.put(url, data)
      .then(response => {
        resolve(response.data);
      }, err => {
        reject(err)
      })
  })
}


export const server = {
  // 登录
  login: function (paramObj) {
    return post('/admin/login', paramObj)
  }
}